{"version":3,"sources":["Header.js","SimpleMenu.js","ContactList.js","ImageInput.js","Contact.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","SimpleMenu","removeContact","contact","React","useState","anchorEl","setAnchorEl","className","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","ContactList","state","query","updateQuery","setState","trim","clearQuery","showContacts","this","props","contacts","match","RegExp","escapeRegExp","filter","test","name","sort","sortBy","type","placeholder","value","onChange","target","to","length","map","key","avatar","style","backgroundImage","phone","email","Component","readFileAsDataURL","file","Promise","resolve","reader","FileReader","onload","result","readAsDataURL","resizeImage","imageURL","canvas","maxHeight","image","Image","context","getContext","height","width","clearRect","drawImage","toDataURL","src","ImageInput","handleFileChange","files","then","originalURL","url","handleFormReset","document","createElement","fileInput","form","addEventListener","removeEventListener","position","backgroundRepeat","backgroundPosition","backgroundSize","ref","node","top","left","opacity","cursor","Contact","handleSubmit","e","preventDefault","values","serializeForm","hash","createContact","onSubmit","required","Footer","App","swal","title","text","icon","buttons","dangerMode","willDelete","c","concat","exact","path","render","history","push","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e542656.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n  <header id=\"header\">\n    <h1>My Contact List</h1>\n  </header>\n)\n\nexport default Header;","import React from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst SimpleMenu = ({ removeContact, contact }) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className=\"contact-menu\">\n      <button className=\"contact-more\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} />\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={() => removeContact(contact)}>Remove</MenuItem>\n      </Menu>\n    </div>\n  );\n}\n\nexport default SimpleMenu;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport escapeRegExp from 'escape-string-regexp';\nimport sortBy from 'sort-by';\nimport SimpleMenu from './SimpleMenu';\n\nclass ContactList extends Component {\n  state = {\n    query: \"\"\n  }\n\n  // Update the contacts that match with the search performed\n  updateQuery = (query) => {\n    this.setState({\n      query: query.trim()\n    })\n  }\n\n  // Clear the search made and show all contacts in the list\n  clearQuery = () => {\n    this.setState({\n      query: \"\"\n    })\n  } \n\n  render() {\n    const { contacts, removeContact } = this.props;\n    const { query } = this.state;\n\n    let showContacts;\n    const match = new RegExp(escapeRegExp(query), 'i');\n\n    // Filter the contacts in the search box\n    (query) ?\n      showContacts = contacts.filter((contact) => match.test(contact.name))\n    :\n      showContacts = contacts\n\n    // Sort the contact list by 'name'\n    showContacts.sort(sortBy('name'));\n\n    return(\n      <section id=\"contacts\">\n        <div className=\"contact-search-add\">\n          <input\n            className=\"contact-search\"\n            type=\"text\"\n            placeholder=\"Search contacts\"\n            value={query}\n            onChange={(event) => this.updateQuery(event.target.value)}\n          />\n          <Link\n            to=\"/create\"\n            className=\"contact-add\"\n          >\n            Add Contact\n          </Link>\n        </div>\n\n        {showContacts.length !== contacts.length && \n          <div className=\"contact-text\">\n            <span>{showContacts.length} of {contacts.length} contacts</span>\n            <button onClick={this.clearQuery}>All contacts</button>\n          </div>\n        } \n        { showContacts.length === contacts.length && \n          <div className=\"contact-text\">\n            <span>There is {contacts.length} contacts</span>\n          </div>\n        }\n\n        <ol className=\"contact-list\">\n          {showContacts.map((contact) => (\n            <li key={contact.id} className=\"contact-list-item\">\n              {contact.avatar ? (\n                  <div className=\"contact-avatar\" style={{backgroundImage: `url(${contact.avatar})`}} />\n                ) : (\n                  <div className=\"contact-avatar contact-no-avatar\" />\n                )\n              }\n              <div className=\"contact-details\">\n                <p>{contact.name}</p>\n                <p>{contact.phone}</p>\n                <p>{contact.email}</p>\n              </div>\n\n              <SimpleMenu \n                removeContact={removeContact}\n                contact={contact}\n              />\n            </li>\n          ))}\n        </ol>\n      </section>\n    );\n  }\n}\n\nexport default ContactList;","// Code provided by Udacity\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n const readFileAsDataURL = (file) =>\r\n   new Promise(resolve => {\r\n     const reader = new FileReader()\r\n\r\n     reader.onload = (event) => {\r\n       resolve(event.target.result)\r\n     }\r\n\r\n     reader.readAsDataURL(file)\r\n   })\r\n\r\n const resizeImage = (imageURL, canvas, maxHeight) =>\r\n   new Promise(resolve => {\r\n     const image = new Image()\r\n\r\n     image.onload = () => {\r\n       const context = canvas.getContext('2d')\r\n\r\n       if (image.height > maxHeight) {\r\n         image.width *= maxHeight / image.height\r\n         image.height = maxHeight\r\n       }\r\n\r\n       context.clearRect(0, 0, canvas.width, canvas.height)\r\n       canvas.width = image.width\r\n       canvas.height = image.height\r\n\r\n       context.drawImage(image, 0, 0, image.width, image.height)\r\n\r\n       resolve(canvas.toDataURL('image/jpeg'))\r\n     }\r\n\r\n     image.src = imageURL\r\n   })\r\n\r\n /**\r\n + * A custom <input> that dynamically reads and resizes image files before\r\n + * submitting them to the server as data URLs. Also, shows a preview of the image.\r\n + */\r\n class ImageInput extends React.Component {\r\n   static propTypes = {\r\n     className: PropTypes.string,\r\n     name: PropTypes.string,\r\n     maxHeight: PropTypes.number\r\n   }\r\n\r\n   state = {\r\n     value: ''\r\n   }\r\n\r\n   handleFileChange = (event) => {\r\n     const file = event.target.files[0]\r\n\r\n     if (file && file.type.match(/^image\\//)) {\r\n       readFileAsDataURL(file).then(originalURL => {\r\n         resizeImage(originalURL, this.canvas, this.props.maxHeight).then(url => {\r\n           this.setState({ value: url })\r\n         })\r\n       })\r\n     } else {\r\n       this.setState({ value: '' })\r\n     }\r\n   }\r\n\r\n   handleFormReset = () => {\r\n     this.setState({ value: '' })\r\n   }\r\n\r\n   componentDidMount() {\r\n     this.canvas = document.createElement('canvas')\r\n     this.fileInput.form.addEventListener('reset', this.handleFormReset)\r\n   }\r\n\r\n   componentWillUnmount() {\r\n     this.fileInput.form.removeEventListener('reset', this.handleFormReset)\r\n   }\r\n\r\n   render() {\r\n     const { className, name } = this.props\r\n     const { value } = this.state\r\n\r\n     const style = {\r\n       position: 'relative'\r\n     }\r\n\r\n     if (value) {\r\n       style.backgroundImage = `url(\"${value}\")`\r\n       style.backgroundRepeat = 'no-repeat'\r\n       style.backgroundPosition = 'center'\r\n       style.backgroundSize = 'cover'\r\n     }\r\n\r\n     return (\r\n       <div className={className} style={style}>\r\n         <input type=\"hidden\" name={name} value={value} />\r\n         <input\r\n           ref={node => this.fileInput = node}\r\n           type=\"file\"\r\n           onChange={this.handleFileChange}\r\n           style={{\r\n             position: 'absolute',\r\n             top: 0,\r\n             left: 0,\r\n             width: '100%',\r\n             height: '100%',\r\n             opacity: 0,\r\n             cursor: 'pointer'\r\n           }}\r\n         />\r\n       </div>\r\n     )\r\n   }\r\n }\r\n\r\n export default ImageInput","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport serializeForm from 'form-serialize';\nimport ImageInput from './ImageInput';\n\nclass Contact extends Component {\n  handleSubmit = (e) => {\n    e.preventDefault()\n  \n    const values = serializeForm(e.target, { hash: true });\n    if(this.props.createContact)\n      this.props.createContact(values)\n  }\n\n  render() {\n    return(\n      <div id=\"page-contact\">\n        <Link className=\"page-contact-back\" to=\"/\">Close</Link>\n        <form className=\"page-contact-form\" onSubmit={this.handleSubmit}>\n          <ImageInput\n            className=\"page-contact-avatar\"\n            name=\"avatar\"\n            maxHeight={64}\n          />\n          <div className=\"page-contact-details\">\n            <input className=\"page-contact-input\" type=\"text\" name=\"name\" placeholder=\"Name\" ref=\"name\" required />\n            <input className=\"page-contact-input\" type=\"number\" name=\"phone\" placeholder=\"Phone\" ref=\"phone\" required />\n            <input className=\"page-contact-input\" type=\"email\" name=\"email\" placeholder=\"Email\" ref=\"email\" />\n            <button className=\"page-contact-btn\">Add Contact</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Contact;","import React from 'react';\n\nconst Footer = () => (\n  <footer id=\"footer\">\n    <p>       \n      Copyright 2019. \"TBM85\"<br/> \n      ALL RIGHTS RESERVED\n    </p>\n  </footer>\n)\n\nexport default Footer;","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport Header from './Header';\nimport ContactList from './ContactList';\nimport Contact from './Contact';\nimport Footer from './Footer';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      {\n        id: \"michael\",\n        name: \"Michael\",\n        avatar: './images/21.svg',\n        phone: \"+1 888 200-20-20\",\n        email: 'michael@gmail.com'\n      },\n      {\n        id: \"linda\",\n        name: \"Linda\",\n        avatar: './images/2.svg',\n        phone: \"+1 800 656-60-06\",\n        email: 'linda@gmail.com'\n      },\n      {\n        id: \"tyler\",\n        name: \"Tyler\",\n        avatar: './images/22.svg',\n        phone: \"+34 911 101-111\",\n        email: 'tyler@gmail.com'\n      },\n      {\n        id: \"lean\",\n        name: \"Lean\",\n        avatar: './images/1.svg',\n        phone: \"+34 903 330-220\",\n        email: 'lean@gmail.com'\n      },\n      {\n        id: \"mary\",\n        name: \"Mary\",\n        avatar: './images/3.svg',\n        phone: \"+44 203 769-18-80\",\n        email: 'mary@gmail.com'\n      },\n      {\n        id: \"ryan\",\n        name: \"Ryan\",\n        avatar: './images/23.svg',\n        phone: \"+1 305 050-05-05\",\n        email: 'ryan@gmail.com'\n      },\n      {\n        id: \"aaron\",\n        name: \"Aaron\",\n        avatar: './images/16.svg',\n        phone: \"+1 805 408-88-03\",\n        email: 'aaron@gmail.com'\n      }, \n      {\n        id: \"carol\",\n        name: \"Carol\",\n        avatar: './images/15.svg',\n        phone: \"+34 205 801-27-76\",\n        email: 'carol@gmail.com'\n      },\n      {\n        id: \"hailey\",\n        name: \"Hailey\",\n        avatar: './images/13.svg',\n        phone: \"+1 209 300-83-92\",\n        email: 'hailey@gmail.com'\n      }, \n      {\n        id: \"walter\",\n        name: \"Walter\",\n        avatar: './images/24.svg',\n        phone: \"+593 999877653\",\n        email: 'walter@gmail.com'\n      }\n    ]\n  }\n\n  // This function removes the selected contact and shows a confirmation modal\n  removeContact = (contact) => {\n    swal({\n      title: \"Are you sure?\",\n      text: \"Once deleted, you will not be able to recover this contact!\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true\n    })\n    .then((willDelete) => {\n      if (willDelete) {\n        willDelete = this.setState((state) => ({\n          contacts: state.contacts.filter((c) => c.id !== contact.id)\n        }))\n        swal(\"Your contact has been deleted!\", {\n          icon: \"success\",\n        });\n      }\n    });\n  }\n\n  // This function adds contact to the contact list\n  createContact = (contact) => {\n    this.setState((state) => ({\n      contacts: state.contacts.concat([ contact ])\n    }))\n  }\n\n  render () {\n    const { contacts } = this.state; \n\n    return(\n      <div className=\"App\">\n        <Header />\n        <Route exact path='/' render={() => (\n          <ContactList \n            contacts={contacts}\n            removeContact={this.removeContact} \n          />\n        )}/>\n        <Route exact path='/create' render={({ history }) => (\n          <Contact \n            createContact={(contact) => {\n              this.createContact(contact)\n              history.push('/')\n            }}\n          />\n        )}/>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}